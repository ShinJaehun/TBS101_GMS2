<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gridX = 0;
gridY = 0;

hoverNode = noone;

selectedActor = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = mouse_x;
y = mouse_y;

gridX = floor(x/GRID_SIZE);
gridY = floor(y/GRID_SIZE);

if (gridX &lt; 0 || gridY &lt; 0 || gridX &gt;= room_width / GRID_SIZE || gridY &gt;= room_height / GRID_SIZE){
    hoverNode = noone;
} else {
    hoverNode = map[gridX, gridY];
}

/*
if (mouse_check_button_pressed(mb_left)){
    if(hoverNode.occupant != noone){
        if(hoverNode.occupant != selectedActor){ // 현재 위치에 다시 클릭하는 거 방지
            selectedActor = hoverNode.occupant;
            selectedActor.actions = 2;
            //movement_range(map[selectedActor.gridX, selectedActor.gridY], selectedActor.move, selectedActor.actions);
            movement_range(hoverNode, selectedActor.move, selectedActor.actions);
        }
    } else {
        selectedActor = noone;
        wipe_nodes();
    }
}
*/

/*
if (mouse_check_button_pressed(mb_right)) {
    //if (selectedActor != noone &amp;&amp; hoverNode.occupant == noone &amp;&amp; hoverNode.passable) {
    if (selectedActor != noone &amp;&amp; hoverNode.moveNode) {
        // first clear the node of selected actor
        map[selectedActor.gridX, selectedActor.gridY].occupant = noone;
        
        // update selectedActor's position and information
        selectedActor.gridX = gridX;
        selectedActor.gridY = gridY;
        selectedActor.x = hoverNode.x;
        selectedActor.y = hoverNode.y;
        
        // update new node's occupant status
        hoverNode.occupant = selectedActor;

        // if selectedActor perform double move deselect
        // otherwise decrement actions and reselect
        
        if(hoverNode.G &gt; selectedActor.move){
            selectedActor = noone;
            wipe_nodes();
        } else {
            selectedActor.actions -= 1;
            if (selectedActor.actions &gt; 0) {
                movement_range(hoverNode, selectedActor.move, selectedActor.actions);
            } else {
                selectedActor = noone;
                wipe_nodes();
            }
        }
                
    } else {
        selectedActor = noone;
        wipe_nodes();
    }
}
*/

if (mouse_check_button_pressed(mb_right)) {
    if (selectedActor != noone &amp;&amp; hoverNode.moveNode) {
        current = hoverNode;
        
        // create priority queue
        path = ds_priority_create();
        
        // add current node to queue
        ds_priority_add(path, current, current.G);
        
        // step through each node, parent to parent, until done
        while(current.parent != noone){
            //add parent node to queue, priority equal to parent's G score
            ds_priority_add(path, current.parent, current.parent.G);
            
            //set current equal to current's parent, ready to go again!
            current = current.parent;
        }
        
        do{
            // delete lowest priority node (closest to actor's) store id in current
            current = ds_priority_delete_min(path);
            
            // add current node's sprite coordinates to selectedActor's path
            path_add_point(selectedActor.movementPath, current.x, current.y, 100);    
        
        }until(ds_priority_empty(path));

        //clean up queue
        ds_priority_destroy(path);
        
        // first clear the node of selectedActor
        map[selectedActor.gridX, selectedActor.gridY].occupant = noone;
        
        // update selectedActor's appropriate grid coords
        selectedActor.gridX = gridX;
        selectedActor.gridY = gridY;
        
        // update selectedActor's future node
        hoverNode.occupant = selectedActor;
            
        // send selectedActor on its way!
        selectedActor.state = "begin path";

        // reduce selectedActor's actions and wipe nodes!
        if(hoverNode.G &gt; selectedActor.move){
            selectedActor.actions -= 2;
            wipe_nodes();
        } else {
            selectedActor.actions -= 1;
            wipe_nodes();
        }
        
        selectedAcotr = noone;

    }
/*                                   
    } else {
        selectedActor = noone;
        wipe_nodes();
    }
*/
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hoverNode != noone){
    // sSelected를 그리고,
    draw_sprite(sSelected, -1, gridX * GRID_SIZE, gridY * GRID_SIZE);
}

draw_self(); // 그 위에 cursor를 그리고

if(hoverNode != noone){
    tempText = string(gridX) + " / " + string(gridY) + " = ";
    
    if(hoverNode.occupant != noone){
        tempText += hoverNode.occupant.name;
    } else {
        tempText += "noone";
    }
    
    draw_set_color(c_black);
    draw_rectangle(0, 0, string_width(tempText), string_height(tempText), false);
    draw_set_color(c_white);
    draw_text(0, 0, tempText);

    tempText = hoverNode.type;
    if(hoverNode.passable){
        tempText += " passable = true" + " cost = " + string(hoverNode.cost);
    }
    
    draw_set_color(c_black);
    draw_rectangle(0, 20, string_width(tempText), 20 + string_height(tempText), false);
    draw_set_color(c_white);
    draw_text(0, 20, tempText);
    

}

// 아랫쪽이 보이지 않아서 클릭 후 이름 정보를 오른쪽 위로 옮김!
if (selectedActor != noone) {
    tempText = selectedActor.name + " the " + selectedActor.race + " " + selectedActor.class;
    tempHitPoints = "HP: " + string(selectedActor.hitPoints) + " / " + string(selectedActor.maxHitPoints);
    tempHitBonus = "Hit Bonus: " + string(selectedActor.hitBonus);
    
    draw_set_color(c_black);
    draw_rectangle(room_width - string_width(tempHitBonus), 0, room_width, string_height(tempHitBonus), false);
    draw_rectangle(room_width - string_width(tempHitPoints), 16, room_width, string_height(tempHitPoints) + 16, false);
    draw_rectangle(room_width - string_width(tempText), 32, room_width, string_height(tempText) + 32, false);
    draw_set_color(c_white);
    draw_text(room_width - string_width(tempHitBonus), 0, tempHitBonus);
    draw_text(room_width - string_width(tempHitPoints), 16, tempHitPoints);
    draw_text(room_width - string_width(tempText), 32, tempText);
}

/*
// 이게 원래 코드
if (selectedActor != noone) {
    tempText = selectedActor.name;
    draw_set_color(c_black);
    draw_rectangle(0, room_height, string_width(tempText), room_height - string_height(tempText), false);
    draw_set_color(c_white);
    draw_text(0, room_height - string_height(tempText), tempText);
}
*/



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
