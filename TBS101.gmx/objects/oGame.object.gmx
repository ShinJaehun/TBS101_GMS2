<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "initializing";

randomize();
//random_set_seed(106543);

turnOrder = ds_list_create();

turnCounter = -1;

turnMax = 0;

currentActor = noone;

roundCounter = 0;

globalvar map;

mapWidth = room_width/GRID_SIZE;
mapHeight = room_height/GRID_SIZE;

// oNode 그리기
for(xx = 0; xx &lt; mapWidth; xx += 1){
    for(yy = 0; yy &lt; mapHeight; yy += 1){
        map[xx, yy] = instance_create(xx * GRID_SIZE, yy * GRID_SIZE, oNode);
        
        map[xx, yy].gridX = xx; // oNode에 gridX, gridY 속성을 추가했음!
        map[xx, yy].gridY = yy;
    }
}

// oNode에서 ds_list(neighbors)의 size를 보여줌
for(xx = 0; xx &lt; mapWidth; xx += 1){
    for(yy = 0; yy &lt; mapHeight; yy += 1){
        node = map[xx, yy];
        if(xx &gt; 0){
            ds_list_add(node.neighbors, map[xx - 1, yy]);
        }
        if(xx &lt; mapWidth - 1){
            ds_list_add(node.neighbors, map[xx + 1, yy]);
        }
        if(yy &gt; 0){
            ds_list_add(node.neighbors, map[xx, yy - 1]);
        }
        if(yy &lt; mapHeight - 1){
            ds_list_add(node.neighbors, map[xx, yy + 1]);
        }
        if(xx &gt; 0 &amp;&amp; yy &gt; 0){
            ds_list_add(node.neighbors, map[xx - 1, yy - 1]);
        }
        if(xx &lt; mapWidth - 1 &amp;&amp; yy &gt; 0){
            ds_list_add(node.neighbors, map[xx + 1, yy - 1]);
        } 
        if(xx &gt; 0 &amp;&amp; yy &lt; mapHeight - 1){
            ds_list_add(node.neighbors, map[xx - 1, yy + 1]);
        }
        if(xx &lt; mapWidth - 1 &amp;&amp; yy &lt; mapHeight - 1){
            ds_list_add(node.neighbors, map[xx + 1, yy + 1]);
        }
    }
}

instance_create(x, y, oCursor); // x, y에 커서 object를 그리다

/* 
// sandy 와 danny: room에서 creation code로 생성하는 것으로 대체
with(instance_create(5 * GRID_SIZE, 5 * GRID_SIZE, oHero)){
    gridX = 5;
    gridY = 5;
    name="Sandy";
    map[gridX, gridY].occupant = id;
}

with(instance_create(5 * GRID_SIZE, 8 * GRID_SIZE, oHero)){
    gridX = 5;
    gridY = 8;
    name="Danny";
    map[gridX, gridY].occupant = id;
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state){
    case "initializing": // 초기화는 1회만...
        //이 로직을 oNode 대신 여기에 넣어야 작동한다!
        with(oNode){
            //if(instance_position(x + 1, y + 1, oTerrain)){ // 예상한대로 잘 작동함, 아마 중간값 같은 걸 쓰는 거 같애
            if(instance_position(x + 16, y + 16, oTerrain)){
                tempTerrain = instance_position(x + 16, y + 16, oTerrain);
                switch(tempTerrain.type){ // room에 그려 넣은 terrain type에 따라서
                    case "wall":
                        type = "wall";
                        sprite_index = sWall;
                        passable = false;
                        break;
                    case "rubble":
                        type = "rubble";
                        sprite_index = sRubble;
                        cost = 2;
                        break;
                }
                with(tempTerrain){
                    instance_destroy(); // oNode는 삭제하고 wall/rubble로 대체
                }
            }
            
            if(instance_position(x + 16, y + 16, oActor)){
                occupant = instance_position(x + 16, y + 16, oActor);
                occupant.gridX = gridX;
                occupant.gridY = gridY;
            }
        }
        state = "roll init";
        break;
    case "roll init":
        tempInit = ds_priority_create();
        with(oActor){
            initRoll = irandom_range(1, 20) + initiative;
            ds_priority_add(other.tempInit, id, initRoll); // other는... oGame으로 대처할 수 있음????
            //ds_priority_add(oGame.tempInit, id, initRoll); // other는... oGame으로 대처할 수 있음????
        }
        
        while(ds_priority_size(tempInit) &gt; 0){
            ds_list_add(turnOrder, ds_priority_delete_max(tempInit));
        }
        
        turnMax = ds_list_size(turnOrder);
        
        ds_priority_destroy(tempInit);
        state = "ready";
        break;

    case "ready":  
        if(currentActor == noone){
            turnCounter += 1;

            if (turnCounter &gt;= turnMax) {
                turnCounter = 0;
                roundCounter += 1;
            }
            
            currentActor = ds_list_find_value(turnOrder, turnCounter);
            currentActor.actions = 2;
            
            // only pass off actions and cursor control if actor is BLUE_ARMY
            // otherwise set flash variable to true and set alarm
            if (currentActor.army == BLUE_ARMY){
                oCursor.selectedActor = currentActor;
                movement_range(map[currentActor.gridX, currentActor.gridY], currentActor.move, currentActor.actions);                    
            } else {
                currentActor.flash = true;
                currentActor.alarm[0] = 30;
            }
        }   
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
