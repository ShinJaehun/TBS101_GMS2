<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gridX = 0;
gridY = 0;

hoverNode = noone;

hoverButton = noone;
buttonTimer = 0;

selectedActor = noone;

instance_create(0, 0, oSelector);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = mouse_x;
y = mouse_y;

gridX = floor(x/GRID_SIZE);
gridY = floor(y/GRID_SIZE);

if (gridX &lt; 0 || gridY &lt; 0 || gridX &gt;= room_width / GRID_SIZE || gridY &gt;= room_height / GRID_SIZE){
    hoverNode = noone;
} else {
    hoverNode = map[gridX, gridY];
}

with(oConfirmButton){
    if(keyboard_check_pressed(vk_enter) || keyboard_check_pressed(ord(hotKey))){
        other.selectedActor.state = "perform action";
        instance_destroy();
    }
}

if(instance_place(x, y, oButton)){
    if(instance_place(x, y, oButton) == hoverButton){
        buttonTimer += 1;
    } else {
        buttonTimer = 0;
    }

    hoverButton = instance_place(x, y, oButton);
    hoverNode = noone;
} else {
    hoverButton = noone;
    buttonTimer = 0;
}

with(oButton){
    if(keyboard_check_pressed(ord(hotKey))){
        perform_buttons(oCursor.selectedActor, id);
    }
}

if(keyboard_check_pressed(vk_escape)){
    if(selectedActor.state == "begin action"){
        selectedActor.state = "idle";
        with(oConfirmButton){
            instance_destroy();
        }
        with(oConfirmBox){
            instance_destroy();
        }
    }
    wipe_nodes();
    movement_range(map[selectedActor.gridX, selectedActor.gridY], selectedActor.move, selectedActor.actions);
    if(selectedActor.canAct){
        switch(selectedActor.attackType){
            case "ranged":
                ranged_attack_range(selectedActor);
                break;
            case "melee":
                melee_attack_range(selectedActor);
                break;    
        }
    }
}


if(mouse_check_button_pressed(mb_left)){
    if(selectedActor != noone &amp;&amp; hoverButton != noone){
        perform_buttons(selectedActor, hoverButton);
    }
    if(instance_place(x, y, oConfirmButton)){
        selectedActor.state = "perform action";
        with(oConfirmButton){
            instance_destroy();
        }
    }
}

if (mouse_check_button_pressed(mb_right)) {
    if (selectedActor != noone &amp;&amp; hoverNode.moveNode) {
        current = hoverNode;
        
        create_path(selectedActor, current);
        
        // first clear the node of selectedActor
        map[selectedActor.gridX, selectedActor.gridY].occupant = noone;
        
        // update selectedActor's appropriate grid coords
        selectedActor.gridX = gridX;
        selectedActor.gridY = gridY;
        
        // update selectedActor's future node
        hoverNode.occupant = selectedActor;
            
        // send selectedActor on its way!
        selectedActor.state = "begin path";
        selectedActor.endPath = "ready";

        // reduce selectedActor's actions and wipe nodes!
        if(hoverNode.G &gt; selectedActor.move){
            selectedActor.actions -= 2;
            wipe_buttons();
            wipe_nodes();
        } else {
            selectedActor.actions -= 1;
            wipe_buttons();
            wipe_nodes();
        }
        
        selectedActor = noone;

    } // moveNode end

    if(selectedActor != noone &amp;&amp; hoverNode.attackNode){
    
        switch(selectedActor.attackType){
            case "ranged":
                selectedActor.canAct = false;
                selectedActor.actions -= 1;
                selectedActor.attackTarget = hoverNode.occupant;
                selectedActor.state = "begin attack"
                selectedActor.actionTimer = 10;
                
                selectedActor = noone;
                wipe_buttons();
                wipe_nodes();
                break;
            case "melee":
                selectedActor.canAct = false;
                selectedActor.attackTarget = hoverNode.occupant;

                tempX = abs(hoverNode.gridX - selectedActor.gridX);
                tempY = abs(hoverNode.gridX - selectedActor.gridY);
                
                if(tempX &lt;= 1 &amp;&amp; tempY &lt;= 1){
                    selectedActor.actions -= 1;
                    selectedActor.state = "begin attack";
                    selectedActor.actionTimer = 10;
                    
                    selectedActor = noone;
                    wipe_buttons();
                    wipe_nodes();    
                } else {
                    tempG = 100;
                    current = noone;
                    
                    for(ii = 0; ii &lt; ds_list_size(hoverNode.neighbors); ii += 1){
                        tempNode = ds_list_find_value(hoverNode.neighbors, ii);
                        if(tempNode.occupant == noone &amp;&amp; tempNode.G &gt; 0 &amp;&amp; tempNode.G &lt; tempG){
                            tempG = tempNode.G;
                            current = tempNode;
                        }
                    }
                    targetNode = current;
                    create_path(selectedActor, targetNode);
                    
                    // first clear the node of selectedActor
                    map[selectedActor.gridX, selectedActor.gridY].occupant = noone;
                    
                    // update selectedActor's appropriate grid coords
                    selectedActor.gridX = targetNode.gridX;
                    selectedActor.gridY = targetNode.gridY;
                    
                    // update selectedActor's future node
                    targetNode.occupant = selectedActor;
                        
                    // send selectedActor on its way!
                    selectedActor.state = "begin path";
                    selectedActor.endPath = "begin attack";
                    selectedActor.attackTarget = hoverNode.occupant;
                    selectedActor.actions -= 2;
                    selectedActor.canAct = false;
                    
                    selectedActor = noone;
                    wipe_buttons();
                    wipe_nodes();
                }
                break;
        }
    } // attackNode end
    
    if(hoverNode.actionNode){
        selectedActor.state = "perform action";
        with(oConfirmBox){
            instance_destroy();
        }
        with(oConfirmButton){
            instance_destroy();
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 요 내용을 oSelector로 분리!
/*
if(hoverNode != noone){
    // sSelected를 그리고,
    draw_sprite(sSelected, -1, gridX * GRID_SIZE, gridY * GRID_SIZE);
}
*/

draw_self(); // 그 위에 cursor를 그리고

if(hoverButton != noone &amp;&amp; buttonTimer &gt; 15){
    tempTitle = hoverButton.title;
    tempText = hoverButton.text;
    draw_set_font(fCrit);
    heightY = string_height(tempTitle) + string_height(tempText);
    draw_set_color(c_black);
    draw_rectangle(x + 20, y - heightY, x + 20 + string_width(tempTitle), y - heightY + string_height(tempTitle), false);
    draw_set_color(c_white);
    draw_text(x + 20, y - heightY, tempTitle);
    draw_set_font(fDefault);
    draw_set_color(c_black);
    draw_rectangle(x + 20, y - string_height(tempText), x + 20 + string_width(tempText), y, false);
    draw_set_color(c_white);
    draw_text(x + 20, y - string_height(tempText), tempText);
}

// 디버깅 정보
/*
if(hoverNode != noone){
    tempText = string(gridX) + " / " + string(gridY) + " = ";
    
    if(hoverNode.occupant != noone){
        tempText += hoverNode.occupant.name;
    } else {
        tempText += "noone";
    }
    
    draw_set_color(c_black);
    draw_rectangle(0, 0, string_width(tempText), string_height(tempText), false);
    draw_set_color(c_white);
    draw_text(0, 0, tempText);

    tempText = hoverNode.type;
    if(hoverNode.passable){
        tempText += " passable = true" + " cost = " + string(hoverNode.cost);
    }
    
    draw_set_color(c_black);
    draw_rectangle(0, 20, string_width(tempText), 20 + string_height(tempText), false);
    draw_set_color(c_white);
    draw_text(0, 20, tempText);
}
*/

// 아랫쪽이 보이지 않아서 클릭 후 이름 정보를 오른쪽 위로 옮김!
if (selectedActor != noone) {
    tempText = selectedActor.name + " the " + selectedActor.race + " " + selectedActor.class;
    tempHitPoints = "HP: " + string(selectedActor.hitPoints) + " / " + string(selectedActor.maxHitPoints);
    tempHitBonus = "Hit Bonus: " + string(selectedActor.hitBonus);
    
    draw_set_color(c_black);
    draw_rectangle(room_width - string_width(tempHitBonus), 0, room_width, string_height(tempHitBonus), false);
    draw_rectangle(room_width - string_width(tempHitPoints), 16, room_width, string_height(tempHitPoints) + 16, false);
    draw_rectangle(room_width - string_width(tempText), 32, room_width, string_height(tempText) + 32, false);
    draw_set_color(c_white);
    draw_text(room_width - string_width(tempHitBonus), 0, tempHitBonus);
    draw_text(room_width - string_width(tempHitPoints), 16, tempHitPoints);
    draw_text(room_width - string_width(tempText), 32, tempText);
}

/*
// 이게 원래 코드
if (selectedActor != noone) {
    tempText = selectedActor.name;
    draw_set_color(c_black);
    draw_rectangle(0, room_height, string_width(tempText), room_height - string_height(tempText), false);
    draw_set_color(c_white);
    draw_text(0, room_height - string_height(tempText), tempText);
}
*/



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
