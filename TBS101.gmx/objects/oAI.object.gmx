<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oActor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shake -= 1;

if (hitPoints &lt;= 0) {
    map[gridX, gridY].occupant = noone;

    if (oGame.currentActor = id){
        oGame.currentActor = noone;
        oCursor.selectedActor = noone;
    }
    
    with(instance_create(x, y, oDying)){
        sprite_index = other.sprite_index;
    }
    
    instance_destroy();
}

switch(state){
    case "initialize turn":
        if(blessed &gt; oGame.roundCounter){
            with(instance_create(x, y, oBless)){
                target = other;
            }
        } else {
            blessed = 0;
        }
        
        if(acidBurn &gt; 0){
            damage = irandom_range(1, 4);
            with(instance_create(x + 28, y + 2, oDamageText)){
                text = "-" + string(other.damage);
                ground = y;
            }
            hitPoints -= damage;
            acidBurn -= 1;
        }

        state = "find target";
        break;
        
    case "find target":
        attackTarget = noone;
        node = map[gridX, gridY];
        
        targetList = ds_list_create();
        
        for(ii = 0; ii &lt; ds_list_size(node.neighbors); ii += 1){
            neighbor = ds_list_find_value(node.neighbors, ii);
            
            if(neighbor.occupant != noone){
                if(neighbor.occupant.army == BLUE_ARMY){
                    //attackTarget = neighbor.occupant;
                    ds_list_add(targetList, neighbor.occupant);
                }
            }
        }

        if(ds_list_size(targetList) &gt; 0){
            // 랜덤 때리기
            // attackTarget = ds_list_find_value(targetList, irandom_range(0, ds_list_size(targetList) - 1)); // random이긴 한데 계속 같은 놈만 때리는 거 아냐?
            
            // 많이 맞은 애 때리기
            roll = irandom_range(1, 20);
            
            if(roll + intMod &gt; 10){
                healthRatio = 1;
                for(ii = 0; ii &lt; ds_list_size(targetList); ii += 1){
                    tempTarget = ds_list_find_value(targetList, ii);
                    if(tempTarget.hitPoints/tempTarget.maxHitPoints &lt; healthRatio){
                        attackTarget = tempTarget;
                        healthRatio = tempTarget.hitPoints/tempTarget.maxHitPoints;
                    }
                }
            }
                        
            if(attackTarget == noone){
                attackTarget = ds_list_find_value(targetList, irandom_range(0, ds_list_size(targetList) -1));            
            }
        }

        ds_list_destroy(targetList);
                        
        if(attackTarget != noone){
            state = "begin attack";
            actionTimer = 10;
        } else {
            state = "find move node";
        }
        
        break;

    case "find move node":
        heroList = ds_priority_create();
        
        with(oActor){
            if(army == BLUE_ARMY){
                ds_priority_add(other.heroList, id, point_distance(x, y, other.x, other.y));
            }
        }
        
        closestNode = noone;
        
        while(closestNode = noone){
            targetHero = ds_priority_delete_min(heroList);
            targetNode = map[targetHero.gridX, targetHero.gridY];
            
            for(ii = 0; ii &lt; ds_list_size(targetNode.neighbors); ii += 1){
                currentNode = ds_list_find_value(targetNode.neighbors, ii);
                if(currentNode.occupant == noone &amp;&amp; currentNode.passable){
                    closestNode = currentNode;
                }
            }
            
            if(ds_priority_size(heroList) &lt;= 0) {
                targetHero = noone;
                flash = true;
                alarm[0] = 30;
                state = "idle";
                break;
            }
        }

        ds_priority_destroy(heroList);
        
        if(targetHero != noone){

            ai_movement(map[gridX, gridY], closestNode);
            while(closestNode.G &gt; move * actions){
                closestNode = closestNode.parent;
            }
            
            create_path(id, closestNode);
            
            map[gridX, gridY].occupant = noone;
            
            gridX = closestNode.gridX;
            gridY = closestNode.gridY;
            
            closestNode.occupant = id;
            
            state = "begin path";
            
            if(closestNode.G &gt; move){
                actions -= 2;
            } else {
                actions -= 1;
            }
        }
        
        wipe_nodes();        
        break;

    case "begin path":
        path_start(movementPath, moveSpeed, 0, true);
        state = "moving";
        
        break;
                
    case "begin attack":
        actionTimer -= 1;
        if(actionTimer &lt;= 0){
            state = "attack";
        }
        break;

    case "attack":
        attackRoll = irandom_range(1, 20);
        
        applySneakAttack = false;
        if(sneakAttack){
            tempNode = map[attackTarget.gridX, attackTarget.gridY];
            for(ii = 0; ii &lt; ds_list_size(tempNode.neighbors); ii += 1){
                current = ds_list_find_value(tempNode.neighbors, ii);
                if(current.occupant != noone){
                    if(current.occupant.army != attackTarget.army){
                        applySneakAttack = true;
                    }
                }
            }
        }
        
        attackStatus = attack_roll(id, attackTarget);
        
        tempDamage = 0;
        
        if(attackStatus != "miss"){
            tempDamage = irandom_range(1, damageDice) + damageBonus;
            
            if(applySneakAttack){
                tempDamage += irandom_range(1, sneakAttackDamage);
            }
            
            if(attackStatus == "crit"){
                tempDamage += irandom_range(1, damageDice);
                if(applySneakAttack){
                    tempDamage += irandom_range(1, sneakAttackDamage);
                }
            }
        }
    
        switch(attackType){
            case "ranged":
                attackDir = point_direction(x + 16, y + 16, attackTarget.x + 16, attackTarget.y + 16);
                beginX = x + 16 + lengthdir_x(30, attackDir);
                beginY = y + 16 + lengthdir_y(30, attackDir);
                
                with(instance_create(beginX, beginY, oArrow)){
                    target = other.attackTarget;
                    status = other.attackStatus;
                    damage = other.tempDamage;
                    damageType = other.damageType;
                    
                    path_add_point(movementPath, other.beginX, other.beginY, 100);
                    if(status != "miss"){
                        path_add_point(movementPath, target.x + 16, target.y + 16, 100);
                    } else {
                        path_add_point(movementPath, target.x + (irandom_range(30, 50) * choose(-1, 1)), target.y + (irandom_range(30, 50) * choose(-1, 1)), 100);
                    }
                    path_start(movementPath, speed, true, true);
                }
                
                state = "end attack";
                actionTimer = 30;
                break;
                
            case "melee":
                if(attackStatus != "miss"){
                    for(ii = 0; ii &lt; 6; ii += 1){
                        with(instance_create(attackTarget.x + 16, attackTarget.y + 16, oBiff)){
                            direction = irandom(360);
                            speed = choose(2, 4);
                            scale = choose(2, 3);
                            image_speed = 0.5;
                            if(other.attackStatus == "crit"){
                                color = c_yellow
                            }
                        }
                    }
                    if(attackStatus == "crit"){
                        attackTarget.shake = 8;
                        attackTarget.shakeMag = 8;
                    } else {
                        attackTarget.shake = 4;
                        attackTarget.shakeMag = 4;
                    }
                    
                    attackTarget.hitPoints -= tempDamage;
                    
                    with(instance_create(attackTarget.x + 28, attackTarget.y + 2, oDamageText)){
                        text = "-" + string(other.tempDamage);
                        ground = y;
                        if(other.attackStatus == "crit"){
                            font = fCrit;
                        }
                    }
                } else {
                    with(instance_create(attackTarget.x + 28, attackTarget.y + 2, oDamageText)){
                        text = "miss";
                        ground = y;
                    }
                }
                state = "end attack";
                actionTimer = 10;
                break;
        }
        break;
        
    case "end attack":
        actionTimer -= 1;
        if(actionTimer &lt;= 0){
            oGame.currentActor = noone;
            state = "idle";
        }
        break;

}


































</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// clear path

path_clear_points(movementPath);

if(actions &gt; 0){
    state = "find target";
} else {
    state = "idle";
    oGame.currentActor = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
